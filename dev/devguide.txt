
////
Swift/T devguide, asciidoc format
////

= Swift/T Developers' Guide
v0.8.0, June 2015

:toc:
:numbered:

////
Settings:
////
:miscellaneous.newline: \n

This document is for developers interested in modifying the Swift/T
codebase.

This document assumes you know everything in the
http://swift-lang.org/Swift-T/guide.html[general user guide] first.

== Git

Everything, including this document, is in:
git@github.com:swift-lang/swift-t.git

== Code conventions

* Eclipse is highly recommended.
* There should be no whitespace at end-of-line.  If you are fixing
  whitespace, put that fix in its own commit.

=== C code

* Open brace after newline

==== ADLB

User-visible symbols are prefixed with +ADLB_+ and follow the MPI/ADLB
capitalization conventions.

Internal symbols are prefixed with +xlb_+ and use all lower case except
for macros/constants.

==== Turbine

User-visible symbols are prefixed with +turbine_+.

=== Java code

* Open brace before newline

== Testing

Each component has a testing mechanism:

=== C-Utils

Just do +make test_results+.

=== ADLB

ADLB is primarily tested in the Turbine test suite, but you can do
+make test_results+ here too.  See also +make apps/batcher.x+.

=== Turbine

Just do +make test_results+.

=== STC

Just do +tests/run-tests.zsh+.

=== Automated testing

Swift/T is tested nightly on an ANL/MCS-internal Jenkins server.  It
is difficult to grant access to this system to external persons.

== How to learn the code

=== Prerequisites

* Strong Unix programming: C, Make, shell.  (We use ZSH for convenience and
  readability but strive to keep things close to the POSIX shell.)
* Basic MPI knowledge is necessary.  Swift/T only uses a small portion
  of MPI, the basic sends and receives.  You need to be able to write
  and run toy MPI programs.
* The main ADLB features are just blocking send/receive.  There are
  some nonblocking calls that are only necessary for advanced internal
  features (work stealing probes).
* Moderate Tcl knowledge is necessary for Turbine.  We make pervasive
  use of Tcl extensions to C, but rarely use advanced Tcl language
  tricks.  SWIG is optional.
* Moderate Java knowledge is necessary for STC.  You need to know
  ANTLR.  STC does not use any other complex Java APIs.
* Concurrency: We do not use threads or any concurrency model.  All
  Swift/T concurrency comes from ADLB/MPI and the Turbine +rule+
  statement.  This makes things mostly sequential and easier to debug.

=== Things to do

* Read the http://swift-lang.org/papers[papers]
* Read the tests, particularly the Turbine tests.  There are fewer of
  them but they demonstrate how Swift/T implements Swift semantics.
  See the STC test guide (About.txt) for further notes.
* Run the http://swift-lang.org/Swift-T/leaf.html[leaf guide examples]

== STC internals

The most complete and up-to-date reference for the STC compiler is the
Javadocs generated from the source tree for high-level information and
the source itself for low-level information.  The Javadocs contain
descriptions of each package and each class and hopefully make it
reasonably easy to explore the source tree.  To generate them from the
STC source, run +ant javadoc+ in the code directory.  However, this page
provides a general overview and introduction that may make it easier
to get into the code base.  

=== Architecture

The compiler is basically a pipeline which takes the Swift program
from the Swift source, into the compiler's intermediate
representation, and then into executable Tcl code.

We need a specialized intermediate representation in the compiler
because neither the Swift code nor the Tcl code is well-suited to
being analyzed or optimized.  Optimization is especially important for
Turbine, because our experience with a simpler compiler that
translated directly from Swift to Turbine generated very inefficient
Turbine code, which performs many unnecessary runtime operations.  We
could implement ad-hoc optimizations with this compiler organization,
but it was challenging, required a lot of ad-hoc changes to the
compiler and was not going to be maintainable in the long run.

The intermediate representation is described in more detail further
down this page in the Swift-IR section.

----
                  (analysis, 
                  semantic checks)          (flatten)        (code generation)
Swift source -----> AST -----> AST + analysis------> Swift-IR------> Tcl
            (parse)                              ^             | 
                                                 |             |
                                                 |             |
                                                 +-------------+
                                                   (optimise)
----

==== Parsing
** Input: Swift file on disk
** Output: AST for Swift program
** How: Using ANTLR grammar in ExM.g 

==== Variable Analysis
* Input: AST for Swift Program
* Output: Information about how each variable is used in each block (i.e. whether it is read, written, etc)
* Checks: Generates errors and warnings about dataflow violations (e.g. read-without-write)
* How: +VariableUsageAnalyser.java+

==== Tree Walking
* Input: AST, Variable Analysis Output
* Output: Lots of calls to +STCMiddleEnd+ to build tree
* How: +ASTWalker.java+, +ExprWalker.java+, +Context.java+,
  +LocalContext.java+, 
  +GlobalContext.java+, +TypeChecker.java+
* Checks: type checks the whole program
* Misc: some optimizations are implemented at this level, such as caching struct fields, just because it was easier to do that way

==== Intermediate Representation Construction
* Input: sequence of calls to STCMiddleEnd which describe program
* Output: IR tree for program
* How: +STCMiddleEnd+ builds tree.  IC constructs are defined under +stc.ic.tree+
* Checks: nothing formally, but lots of assertions to make sure the previous stages aren't misbehaving

==== Optimization
* Input: IR tree
* Output: IR tree
* How:
* All optimiser passes are under +stc.ic.opt+.  Some transformations
of code tree are assisted by methods of tree classes

==== Tcl Generation
* Input: sequence of calls to +TurbineGenerator+ (generated from IR tree)
* Output: Tcl code as string
* How: Each construct in IR tree makes calls to +TurbineGenerator+.
  +TurbineGenerator.java+, +Turbine.java+, classes under
  +stc.tclbackend+ package are used to build and output the Tcl
  output code. 

=== Code organization 

The best way to get an overview of the stc source code layout is to
look at the Javadocs.  To construct the Javadoc run +ant javadoc+ in the
+stc/code+ directory.  This will create html pages under the javadoc
directory/ This is an overview of what is in the STC Java source code.

=== ANTLR

The SwiftScript parser is generated at build time by +build.xml+
target +antlr.generate+ This generates the Java source in
+src/exm/stc/ast/antlr+.  At run time, this package is used by
+Main.runANTLR()+ to generate the SwiftScript AST in the ANTLR Tree
object

=== SwiftScript AST

The ANTLR Tree is passed to and walked by class SwiftScript, which
progresses down the tree and makes calls to +TurbineGenerator+.

TIC statements correspond closely to the original SwiftScript so this
is straightforward. 

=== Tcl generation

We construct an in-memory tree representing the Tcl output program
(under +exm.stc.tclbackend.tree+) which is then written to the output.

This package creates structured data in memory.  The Tcl program is
represented as a big sequence of commands.  Other Tcl syntax features
are also representable.  The package is big a class hierarchy; +TclTree+
is the most abstract class.

STC stores the working Tcl tree in +TurbineGenerator.tree+ .  When it
is fully built, the String representation is obtained via
+TurbineGenerator.code()+ and is written to the output file
(cf. +STCompiler.compile()+).

==== Historical note

Multiple avenues were explored for generating Tcl:

* String generation right in TurbineGenerator: 
  This got messy quickly with multiple lines of string, spacing, and new
  line issues mixed in with logic. 
* A lightweight Tcl API to generate common string patterns: 
  This was not much better.
* StringTemplate: Swift/K used this approach.  The library is produced
  by the ANTLR people. My opinion is that this is a moderately complex
  technology that does not give us enough control over the output

=== Settings

In general, parser settings should be processed as follows: 

* Entered into the UI through the +stc+ script which converts
  command-line arguments or environment variables into Java properties
  (+-D+).
* From there, general settings should go into class +Settings+

* Exceptions: Logging, input SwiftScript and output Tcl locations are not in Settings.
  The target Turbine version is set at compile time by editing Settings.

=== Debugging STC

Tip: When debugging the compiler, it is convenient to do: 
----
stc -l /dev/stdout <input>.swift /dev/stdout
----

=== Test suite

The test suite compiles a variety of SwiftScript cases and runs them
under Turbine.  See +stc/tests/About.txt+ for usage.

////
* Ordering: The +*.swift+ files are located and sorted by the leading
  number in the file name
* Compile step: The +*.swift+ file is translated by +stc+ to +*.tcl+, 
  producing output in +*.stc.log+ and +*.stc.out+
* Execution step: +*.setup.sh+ is executed if it exists (to create input files, etc.)
*.tcl is executed by Turbine using mpiexec
*.check.sh is executed if it exists (to check output and clean up)
Output is in *.setup.out, *.out (TURBINE_OUTPUT), and *.check.out
TURBINE_OUTPUT is available to the check script
Non-zero exit codes anywhere result in failure
This terminates the test suite unless the user provides -c (continue)
////

////
Local Variables:
mode: doc
eval: (auto-fill-mode 1)
End:
////
